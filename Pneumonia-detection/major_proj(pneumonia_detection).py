# -*- coding: utf-8 -*-
"""major proj(Pneumonia Detection).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18xBbqhtLSn8CFdB5JAFxRM9ik4n-3HyE
"""

import numpy as np
import pandas as pd
import os
import cv2
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import classification_report, confusion_matrix

# Define image data generators for training, validation, and testing
train_datagen = ImageDataGenerator(
    rescale=1.0/255.0,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

val_datagen = ImageDataGenerator(rescale=1.0/255.0)
test_datagen = ImageDataGenerator(rescale=1.0/255.0)

# Load training data
train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/chest_xray/train',
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

# Load validation data
val_generator = val_datagen.flow_from_directory(
    '/content/drive/MyDrive/chest_xray/val',
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

# Load test data
test_generator = test_datagen.flow_from_directory(
    '/content/drive/MyDrive/chest_xray/test',
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary',
    shuffle=False
)

import os
import matplotlib.pyplot as plt
import cv2

# Define the paths to the training dataset
train_normal_dir = '/content/drive/MyDrive/chest_xray/train/NORMAL'  # Replace with actual path
train_pneumonia_dir = '/content/drive/MyDrive/chest_xray/train/PNEUMONIA'  # Replace with actual path

# Function to load and display an image
def display_image(image_path, title):
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB
    plt.imshow(img)
    plt.title(title)
    plt.axis('off')  # Hide axes
    plt.show()

# Get a random normal image
normal_images = os.listdir(train_normal_dir)
normal_image_path = os.path.join(train_normal_dir, normal_images[0])  # Get the first normal image
display_image(normal_image_path, 'Normal X-ray Image')

# Get a random pneumonia image
pneumonia_images = os.listdir(train_pneumonia_dir)
pneumonia_image_path = os.path.join(train_pneumonia_dir, pneumonia_images[0])  # Get the first pneumonia image
display_image(pneumonia_image_path, 'Pneumonia X-ray Image')

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))  # Binary classification

model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(
    train_generator,
    epochs=10,
    validation_data=val_generator
)

test_loss, test_accuracy = model.evaluate(test_generator)
print(f'Test Loss: {test_loss}, Test Accuracy: {test_accuracy}')

# Generate predictions
Y_pred = model.predict(test_generator)
y_pred = np.where(Y_pred > 0.5, 1, 0)

# Confusion matrix
cm = confusion_matrix(test_generator.classes, y_pred)
print(cm)

# Classification report
print(classification_report(test_generator.classes, y_pred))

import seaborn as sns

def plot_confusion_matrix(cm):
    plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Normal', 'Pneumonia'], yticklabels=['Normal', 'Pneumonia'])
    plt.ylabel('Actual')
    plt.xlabel('Predicted')
    plt.title('Confusion Matrix')
    plt.show()

plot_confusion_matrix(cm)

# Save the entire model
model.save('pneumonia_detection_model.h5')  # Save as HDF5 file

from keras.models import load_model

# Load the model
loaded_model = load_model('pneumonia_detection_model.h5')

import random
# Define the path to the test dataset
test_normal_dir = '/content/drive/MyDrive/chest_xray/test/NORMAL'  # Replace with actual path
test_pneumonia_dir = '/content/drive/MyDrive/chest_xray/test/PNEUMONIA'  # Replace with actual path

# Function to load and display an image
def display_image(image_path, title):
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB
    plt.imshow(img)
    plt.title(title)
    plt.axis('off')  # Hide axes
    plt.show()

# Function to prepare the image for prediction
def prepare_image(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (150, 150))  # Resize to match model input
    img = img / 255.0  # Normalize the image
    img = np.expand_dims(img, axis=0)  # Add batch dimension
    return img

# Randomly select an image from the test set
def get_random_image(test_dir):
    all_images = os.listdir(test_dir)
    random_image = random.choice(all_images)
    return os.path.join(test_dir, random_image)

# Get a random normal image and a random pneumonia image
random_normal_image_path = get_random_image(test_normal_dir)
random_pneumonia_image_path = get_random_image(test_pneumonia_dir)

# Prepare the images for prediction
normal_img = prepare_image(random_normal_image_path)
pneumonia_img = prepare_image(random_pneumonia_image_path)

# Make predictions
normal_prediction = model.predict(normal_img)
pneumonia_prediction = model.predict(pneumonia_img)

# Display the normal image and its prediction
display_image(random_normal_image_path, 'Random Normal X-ray Image')
print(f'Normal Image Prediction: {"Pneumonia" if normal_prediction[0][0] > 0.5 else "Normal"} (Confidence: {normal_prediction[0][0]})')

# Display the pneumonia image and its prediction
display_image(random_pneumonia_image_path, 'Random Pneumonia X-ray Image')
print(f'Pneumonia Image Prediction: {"Pneumonia" if pneumonia_prediction[0][0] > 0.5 else "Normal"} (Confidence: {pneumonia_prediction[0][0]})')

